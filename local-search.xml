<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>roscpp 编译依赖</title>
    <link href="/p/ae54ea80735f49c5b4aacb48f9235ede/"/>
    <url>/p/ae54ea80735f49c5b4aacb48f9235ede/</url>
    
    <content type="html"><![CDATA[<p>在代码中全部重新编译的时候，即<code>catkin_make clean</code>，<code>catkin_make</code>，发现出错找不到 ros 生成的头文件，但是第二遍编译的时候就 ok，这里引出了 ros 需要的知识点，看下面这段代码：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">add_dependencies</span><span class="hljs-params">(camera_lidar_calibration_node <span class="hljs-string">$&#123;</span><span class="hljs-string">$&#123;</span>PROJECT_NAME&#125;_EXPORTED_TARGETS&#125; <span class="hljs-string">$&#123;</span>catkin_EXPORTED_TARGETS&#125;)</span></span><br></code></pre></td></tr></table></figure><p><code>$&#123;$&#123;PROJECT_NAME&#125;_EXPORTED_TARGETS&#125;</code>这个是本模块需要生成的 ROS 头文件，如果本模块定义了 ROS 的 msg、service 等文件，就需要这个；<code>$&#123;catkin_EXPORTED_TARGETS&#125;</code>是其他模块需要生成的 ROS 头文件。如果用到了其他模块的 ros 头文件，则需要添加这个。</p>]]></content>
    
    
    <categories>
      
      <category>opensource</category>
      
      <category>ROS</category>
      
      <category>ros_comm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>roscpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s术语概念理解</title>
    <link href="/p/6910feb53f194474bb9e71abb3bd867e/"/>
    <url>/p/6910feb53f194474bb9e71abb3bd867e/</url>
    
    <content type="html"><![CDATA[<p><img src="/resources/88c95142121644a6ba6cbeb8b2880f31.svg" alt="drawio"></p>]]></content>
    
    
    <categories>
      
      <category>computer</category>
      
      <category>操作系统</category>
      
      <category>云计算&amp;云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matplotlib cpp库</title>
    <link href="/p/61635dc8a552464493058654f14037ef/"/>
    <url>/p/61635dc8a552464493058654f14037ef/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>使用最多星的仓库：<a href="https://github.com/lava/matplotlib-cpp/blob/master/matplotlibcpp.h">https://github.com/lava/matplotlib-cpp/blob/master/matplotlibcpp.h</a></p><p>但是这个仓库不支持设置text接口设置文字大小。</p><p>可以添加<a href="https://github.com/ypmen/PulsarX/blob/9516726d3efda9fe07d2959b69e1b1d4dd69d499/include/matplotlibcpp.h">https://github.com/ypmen/PulsarX/blob/9516726d3efda9fe07d2959b69e1b1d4dd69d499/include/matplotlibcpp.h</a> 这个仓库中的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Numeric&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">text</span><span class="hljs-params">(Numeric x, Numeric y, <span class="hljs-type">const</span> std::string&amp; s, <span class="hljs-type">const</span> std::map&lt;std::string, std::string&gt; &amp;keywords = &#123;&#125;)</span></span><br><span class="hljs-function"></span>&#123;<br>    detail::_interpreter::<span class="hljs-built_in">get</span>();<br><br>    PyObject* args = <span class="hljs-built_in">PyTuple_New</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">PyTuple_SetItem</span>(args, <span class="hljs-number">0</span>, <span class="hljs-built_in">PyFloat_FromDouble</span>(x));<br>    <span class="hljs-built_in">PyTuple_SetItem</span>(args, <span class="hljs-number">1</span>, <span class="hljs-built_in">PyFloat_FromDouble</span>(y));<br>    <span class="hljs-built_in">PyTuple_SetItem</span>(args, <span class="hljs-number">2</span>, <span class="hljs-built_in">PyString_FromString</span>(s.<span class="hljs-built_in">c_str</span>()));<br><br>    PyObject* kwargs = <span class="hljs-built_in">PyDict_New</span>();<br>    <span class="hljs-keyword">for</span>(std::map&lt;std::string, std::string&gt;::const_iterator it = keywords.<span class="hljs-built_in">begin</span>(); it != keywords.<span class="hljs-built_in">end</span>(); ++it)<br>    &#123;<br>        <span class="hljs-built_in">PyDict_SetItemString</span>(kwargs, it-&gt;first.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">PyUnicode_FromString</span>(it-&gt;second.<span class="hljs-built_in">c_str</span>()));<br>    &#125;<br><br>    PyObject* res = <span class="hljs-built_in">PyObject_Call</span>(detail::_interpreter::<span class="hljs-built_in">get</span>().s_python_function_text, args, kwargs);<br>    <span class="hljs-built_in">Py_DECREF</span>(kwargs);<br>    <span class="hljs-built_in">Py_DECREF</span>(args);<br>    <br>    <span class="hljs-keyword">if</span>(!res) <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Call to text() failed.&quot;</span>);<br><br>    <span class="hljs-built_in">Py_DECREF</span>(res);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>apt-get install python3-matplotlib python3-numpy python3-dev</p><p>然后直接使用头文件</p><p>cmake编译出错：fatal error: Python.h: No such file or directory<br>需要把这个头文件目录&#x2F;usr&#x2F;include&#x2F;python3.8加到include_directories头文件搜索路径中。</p>]]></content>
    
    
    <categories>
      
      <category>computer</category>
      
      <category>数据可视化</category>
      
      <category>matplotlib</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>智能指针内存泄漏</title>
    <link href="/p/0efeb780e2174c3f87e649f53627ef5e/"/>
    <url>/p/0efeb780e2174c3f87e649f53627ef5e/</url>
    
    <content type="html"><![CDATA[<h2 id="1-循环引用"><a href="#1-循环引用" class="headerlink" title="1. 循环引用"></a>1. 循环引用</h2><p>当两个对象相互引用时，如果它们都使用了std::shared_ptr，则它们之间的引用计数永远不会降为零，从而导致内存泄漏。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Node</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Node created.&quot;</span> &lt;&lt; std::endl; &#125;<br>  std::shared_ptr&lt;Node&gt; next;<br>  ~<span class="hljs-built_in">Node</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Node destroyed.&quot;</span> &lt;&lt; std::endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-function">std::shared_ptr&lt;Node&gt; <span class="hljs-title">node1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Node())</span></span>;<br>  <span class="hljs-function">std::shared_ptr&lt;Node&gt; <span class="hljs-title">node2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Node())</span></span>;<br>  node1-&gt;next = node2;<br>  node2-&gt;next = node1;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-循环依赖"><a href="#2-循环依赖" class="headerlink" title="2. 循环依赖"></a>2. 循环依赖</h2><p>如果一个类的成员变量是std::shared_ptr类型，而该成员变量所指向的对象又直接或间接地依赖于该类，则这种情况也可能导致内存泄漏。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  std::shared_ptr&lt;B&gt; b;<br>  <span class="hljs-built_in">A</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;A constructed.&quot;</span> &lt;&lt; std::endl; &#125;<br>  ~<span class="hljs-built_in">A</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;A destroyed.&quot;</span> &lt;&lt; std::endl; &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  std::shared_ptr&lt;A&gt; a;<br>  <span class="hljs-built_in">B</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;B constructed.&quot;</span> &lt;&lt; std::endl; &#125;<br>  ~<span class="hljs-built_in">B</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;B destroyed.&quot;</span> &lt;&lt; std::endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-function">std::shared_ptr&lt;A&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">new</span> A())</span></span>;<br>  <span class="hljs-function">std::shared_ptr&lt;B&gt; <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-keyword">new</span> B())</span></span>;<br>  a-&gt;b = b;<br>  b-&gt;a = a;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在某些情况下使用weak_ptr可以避免内存泄漏的问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>;<br><span class="hljs-keyword">typedef</span> std::shared_ptr&lt;Node&gt; NodePtr;<br><span class="hljs-keyword">typedef</span> std::weak_ptr&lt;Node&gt; WeakNodePtr;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> i) : <span class="hljs-built_in">id_</span>(i) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Node&quot;</span> &lt;&lt; id_ &lt;&lt; <span class="hljs-string">&quot;created.&quot;</span> &lt;&lt; std::endl;<br>  &#125;<br>  WeakNodePtr next;<br>  ~<span class="hljs-built_in">Node</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Node&quot;</span> &lt;&lt; id_ &lt;&lt; <span class="hljs-string">&quot;destroyed.&quot;</span> &lt;&lt; std::endl; &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int</span> id_;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">// node 2 后注册先析构</span><br>  <span class="hljs-function">NodePtr <span class="hljs-title">node1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Node(<span class="hljs-number">1</span>))</span></span>;<br>  <span class="hljs-function">NodePtr <span class="hljs-title">node2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Node(<span class="hljs-number">2</span>))</span></span>;<br>  node1-&gt;next = node2;<br>  node2-&gt;next = node1;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>computer</category>
      
      <category>开发语言</category>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>boost filesystem</title>
    <link href="/p/448411dcbded45d78da06cc4031fc257/"/>
    <url>/p/448411dcbded45d78da06cc4031fc257/</url>
    
    <content type="html"><![CDATA[<h2 id="directory"><a href="#directory" class="headerlink" title="directory"></a>directory</h2><p>boost::filesystem::exists<br>boost::filesystem::is_directory<br>两个函数的主要区别在于，exists函数只检查文件或目录是否存在，而is_directory函数则检查指定路径是否是一个目录。<br>is_directory接口也能识别出不存在的情况返回false。</p><p>boost::filesystem::create_directory<br>注意这个接口必须是父目录已经存在，类似于linux的<code>mkdir</code>命令。</p><p>boost::filesystem::create_directories<br>类似于linux的<code>mkdir -p</code>命令。</p><p>boost::filesystem::recursive_directory_iterator</p><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>boost::filesystem::is_regular_file</p>]]></content>
    
    
    <categories>
      
      <category>computer</category>
      
      <category>开发语言</category>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>boost</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码构建工具cmake和catkin_make</title>
    <link href="/p/f46e5861897b4bd6841eed5315979314/"/>
    <url>/p/f46e5861897b4bd6841eed5315979314/</url>
    
    <content type="html"><![CDATA[<h2 id="cmake语法"><a href="#cmake语法" class="headerlink" title="cmake语法"></a>cmake语法</h2><h3 id="ADD-DEPENDENCIES"><a href="#ADD-DEPENDENCIES" class="headerlink" title="ADD_DEPENDENCIES"></a>ADD_DEPENDENCIES</h3><p>定义 target 依赖的其他 target，确保在编译本 target 之前，其他的 target 已经被构建。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">ADD_DEPENDENCIES(<span class="hljs-keyword">target</span>-name depend-<span class="hljs-keyword">target</span><span class="hljs-number">1</span><br> depend-<span class="hljs-keyword">target</span><span class="hljs-number">2</span> ...)<br></code></pre></td></tr></table></figure><h3 id="TARGET-LINK-LIBRARIES"><a href="#TARGET-LINK-LIBRARIES" class="headerlink" title="TARGET_LINK_LIBRARIES"></a>TARGET_LINK_LIBRARIES</h3><p>为 target 添加需要链接的共享库:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">TARGET_LINK_LIBRARIES</span>(<span class="hljs-keyword">target</span> library1<br> &lt;debug | optimized&gt; library2<br> ...)<br></code></pre></td></tr></table></figure><h3 id="FIND-PACKAGE"><a href="#FIND-PACKAGE" class="headerlink" title="FIND_PACKAGE"></a>FIND_PACKAGE</h3><p>用来调用预定义在 CMAKE_MODULE_PATH 下的 Find<name>.cmake 模块。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">FIND_PACKAGE(&lt;name&gt; <span class="hljs-comment">[major.minor]</span> <span class="hljs-comment">[QUIET]</span> <span class="hljs-comment">[NO_MODULE]</span><br> <span class="hljs-comment">[<span class="hljs-comment">[REQUIRED|COMPONENTS]</span> <span class="hljs-comment">[componets...]</span>]</span>)<br></code></pre></td></tr></table></figure><h2 id="catkin-make语法"><a href="#catkin-make语法" class="headerlink" title="catkin_make语法"></a>catkin_make语法</h2><p>加粗为Catkin的语法<br>cmake_minimum_required() #CMake的版本号<br>project() #项目名称<br>find_package() #找到编译需要的其他CMake&#x2F;Catkin package<br><strong>catkin_python_setup()</strong> #catkin新加宏，打开catkin的Python Module的支持<br><strong>add_message_files()</strong> #catkin新加宏，添加自定义Message&#x2F;Service&#x2F;Action文件<br><strong>add_service_files()</strong><br><strong>add_action_files()</strong><br><strong>generate_message()</strong> #catkin新加宏，生成不同语言版本的msg&#x2F;srv&#x2F;action接口<br><strong>catkin_package()</strong> #catkin新加宏，生成当前package的cmake配置，供依赖本包的其他软件包调用<br>add_library() #生成库<br>add_executable() #生成可执行二进制文件<br>add_dependencies() #定义目标文件依赖于其他目标文件，确保其他目标已被构建<br>target_link_libraries() #链接<br><strong>catkin_add_gtest()</strong> #catkin新加宏，生成测试<br>install() #安装至本机</p>]]></content>
    
    
    <categories>
      
      <category>computer</category>
      
      <category>操作系统</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>build</tag>
      
      <tag>catkin_make</tag>
      
      <tag>ros</tag>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim可重复的操作及如何回退</title>
    <link href="/p/2273b5c40e7e4648b85de0f851cb80a8/"/>
    <url>/p/2273b5c40e7e4648b85de0f851cb80a8/</url>
    
    <content type="html"><![CDATA[<p><img src="/resources/94c88c00dc294a0ba26db9aeedb1c8e3.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>computer</category>
      
      <category>操作系统</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
